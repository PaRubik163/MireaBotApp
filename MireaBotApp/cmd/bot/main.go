package main

import (
	"github.com/joho/godotenv"
	"log"
	"os"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	handler "mireabot/internal/parser/bot"
	database "mireabot/internal/parser/bot/storage"
)

type UserState struct {
	login            string
	password         string
	awaitingLogin    bool
	awaitingPassword bool
	updateLogin      bool
	uppdatePassword  bool
}

var userStates = make(map[int64]*UserState)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	botToken := os.Getenv("BOT_TOKEN")

	if botToken == "" {
		log.Fatal("Short BotToken")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	//bot.Debug = true
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		messageText := update.Message.Text

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –º–∞–ø–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
		if _, exists := userStates[chatID]; !exists {
			userStates[chatID] = &UserState{}
		}

		user := userStates[chatID]

		switch {
		//–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∞—Ä—Ç
		case messageText == "/start":
			handler.HandlerStart(bot, update.Message)

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /login
		case messageText == "/login":
			database.InitDB()
			if !database.IsExists(update.Message.From.UserName) {
				user.awaitingLogin = true
				msg := tgbotapi.NewMessage(chatID, "üîë–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
				bot.Send(msg)
			} else {
				l, p := database.Select(update.Message.From.UserName)
				handler.HandlerLogin(bot, update.Message, l, p)
			}

		// –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –ª–æ–≥–∏–Ω
		case user.awaitingLogin:
			user.login = messageText
			user.awaitingLogin = false
			user.awaitingPassword = true
			msg := tgbotapi.NewMessage(chatID, "üîí–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
			bot.Send(msg)

		// –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –ø–∞—Ä–æ–ª—å ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
		case user.awaitingPassword:
			user.password = messageText
			user.awaitingPassword = false

			// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
			if handler.HandlerLogin(bot, update.Message, user.login, user.password) {
				database.Insert(update.Message.From.UserName, user.login, user.password)
			} else {
				reply := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ /login")
				bot.Send(reply)
			}

		case messageText == "/update":
			database.InitDB()
			if database.IsExists(update.Message.From.UserName) {
				user.updateLogin = true
				msg := tgbotapi.NewMessage(chatID, "üîë–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
				bot.Send(msg)
			}
		case user.updateLogin:
			user.login = messageText
			user.updateLogin = false
			user.uppdatePassword = true
			msg := tgbotapi.NewMessage(chatID, "üîí–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
			bot.Send(msg)

		// –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –ø–∞—Ä–æ–ª—å ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
		case user.uppdatePassword:
			user.password = messageText
			user.uppdatePassword = false

			// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
			if handler.HandlerLogin(bot, update.Message, user.login, user.password) {
				database.Update(update.Message.From.UserName, user.login, user.password)
			} else {
				reply := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ /login")
				bot.Send(reply)
			}
		// –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		default:
			msg := tgbotapi.NewMessage(chatID, "‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ /login –¥–ª—è –ë–†–°.")
			bot.Send(msg)
		}
	}
}
