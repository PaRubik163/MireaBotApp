package main

import (
	"log"
	"os"

	"github.com/joho/godotenv"

	handler "mireabot/internal/parser/bot"
	"mireabot/internal/parser/bot/admin"
	database "mireabot/internal/parser/bot/storage"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type UserState struct {
	login            string
	password         string
	awaitingLogin    bool
	awaitingPassword bool
	isUpdate         bool
}

var userStates = make(map[int64]*UserState)
var key []byte

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	botToken := os.Getenv("BOT_TOKEN")
	keyStr := os.Getenv("key")

	if botToken == "" || len(keyStr) < 32 {
		log.Fatal("Short BotToken or key error!")
	}
	key = []byte(keyStr)
	bot, err := tgbotapi.NewBotAPI(botToken)

	//bot.Debug = true
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç)
		if update.Message != nil {
			chatID := update.Message.Chat.ID
			text := update.Message.Text

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π ‚Äî —Å–æ–∑–¥–∞—ë–º –¥–ª—è –Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			if _, exists := userStates[chatID]; !exists {
				userStates[chatID] = &UserState{}
			}
			user := userStates[chatID]

			switch {
			case user.awaitingLogin:
				user.login = text
				user.awaitingLogin = false
				user.awaitingPassword = true

				bot.Send(tgbotapi.NewMessage(chatID, "üîí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"))

			case user.awaitingPassword:
				user.password = text
				user.awaitingPassword = false

				//// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
				if handler.HandlerLogin(bot, update.Message, user.login, user.password) {
					if user.isUpdate {
						database.Update(update.Message.From.UserName, user.login, user.password, key)
						go admin.HandlerAdminIfUpdate(bot, update.Message.From.UserName)
						user.isUpdate = false
					} else {
						database.Insert(int(update.Message.Chat.ID), update.Message.From.UserName, user.login, user.password, key)
						go admin.HandlerAdminIfLogin(bot, update.Message.From.UserName, user.login, user.password)
					}
				} else {
					if user.isUpdate {
						handler.BadAutorization(bot, update.Message)
					} else {
						errButton := tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", "login")
						row := tgbotapi.NewInlineKeyboardRow(errButton)
						keyboard := tgbotapi.NewInlineKeyboardMarkup(row)

						reply := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò\n\nü§î–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å\nüôè–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
						reply.ReplyMarkup = keyboard

						if _, err := bot.Send(reply); err != nil {
							log.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", err)
						}
					}
				}

			case text == "/start":
				handler.SendStartButtons(bot, chatID)

			default:
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É"))
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil {
			callback := update.CallbackQuery
			chatID := callback.Message.Chat.ID

			if _, exists := userStates[chatID]; !exists {
				userStates[chatID] = &UserState{}
			}
			user := userStates[chatID]

			switch callback.Data {
			case "login":
				go func() { //–¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
					if r := recover(); r != nil {
						log.Println("panic –≤ –º–æ–º–µ–Ω—Ç login")
					}
					database.InitDB()
					if !database.IsExists(callback.From.UserName) {
						user.awaitingLogin = true
						bot.Send(tgbotapi.NewMessage(chatID, "üîë–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ú–ò–†–≠–ê:"))
					} else {
						l, p := database.SelectLoginandPassword(callback.From.UserName, key)
						handler.HandlerLogin(bot, callback.Message, l, p)
						go admin.HandlerAdminIfLogin(bot, update.CallbackQuery.From.UserName, l, p)
					}
				}()
			case "update":
				go func() { //–¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
					if r := recover(); r != nil {
						log.Println("panic –≤–æ –≤—Ä–µ–º—è update")
					}
					database.InitDB()
					if database.IsExists(callback.From.UserName) {
						user.awaitingLogin = true
						user.isUpdate = true
						bot.Send(tgbotapi.NewMessage(chatID, "üîë–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥—Ä—É–≥–∞:"))
					}
				}()
			default:
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"))
			}

			bot.Request(tgbotapi.NewCallback(callback.ID, ""))
		}
	}
}
